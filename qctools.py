#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './qctools_win.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is run again.
# Do not edit this file unless you know what you are doing.

#
#  TFF/QC Tools
#  Unlock and flash the Android phone device
#  GUI version report:  1.0 beta (20220820_2120wib)
#
#  This script developed by Faizal Hamzah [The Firefox Flasher].
#  Licensed under the MIT License.
#
#  Credits:
#      https://github.com/nijel8               developer of emmcdl
#      https://github.com/bkerler              developer of Qualcomm Firehose Attacker
#      https://www.facebook.com/haryflasher    owner of Qualcomm GSM Sulteng Tool
#      https://www.facebook.com/f.hadikhoir    software engineer
#


import ctypes
import os
import platform
import re
import serial
import shutil
import ssl
import subprocess
import sys
import threading

from datetime import datetime
from time import sleep
from urllib import request
from zipfile import ZipFile

# Load requirements modules
from PyQt5 import QtCore, QtGui, QtWidgets
from corestff import getdevices, unlock, reboot
from serial.tools import list_ports

class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(Ui_MainWindow, self).__init__()
        welcome = f"<span style=\"color:#ffffff;\"><p>TFF/Qualcomm Tools<br/>GUI version report:  1.0 {build_info}<br/><br/>This is beta development<br/></p></span>"

        icon = QtGui.QIcon()
        for size in ["_16.png", "_32.png", "_64.png", "_128.png", "_256.png"]:
            icon.addPixmap(QtGui.QPixmap(icon_file + size), QtGui.QIcon.Selected, QtGui.QIcon.On)

        self.resize(1024, 652)
        self.setMinimumSize(QtCore.QSize(1024, 652))
        self.setMaximumSize(QtCore.QSize(1024, 652))
        self.setWindowTitle("TFF/QC Tools  -  GUI mode version 1.0 " + build_info)
        self.setWindowIcon(icon)
        self.setWindowModality(QtCore.Qt.WindowModal)
        self.setTabShape(QtWidgets.QTabWidget.Rounded)

        if platform.system() == "Windows":
            rect = QtWidgets.QDesktopWidget().availableGeometry()
            mainRect = self.frameGeometry()
            mainRect.moveCenter(rect.center())
            self.move(mainRect.topLeft())

        self.centralwidget = QtWidgets.QWidget(self)

        self.tab = QtWidgets.QTabWidget(self.centralwidget)
        self.tab.setTabPosition(QtWidgets.QTabWidget.South)
        self.tab.setDocumentMode(True)



        self.UnlockerMenu = QtWidgets.QWidget()

        self.port_list_1 = QtWidgets.QComboBox(self.UnlockerMenu)

        self.refresh_port_1 = QtWidgets.QPushButton(self.UnlockerMenu)
        self.refresh_port_1.setText("Re&fresh")
        self.refresh_port_1.clicked.connect(self.check_port)

        self.log_process_1 = QtWidgets.QTextEdit(self.UnlockerMenu)
        self.log_process_1.setStyleSheet('''
        background-color: rgb(66, 66, 66);
        selection-background-color: rgb(28, 113, 216);
        alternate-background-color: rgb(255, 255, 255);
        ''')
        self.log_process_1.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.log_process_1.setReadOnly(True)
        self.log_process_1.setHtml(welcome)

        self.stop_process_1 = QtWidgets.QPushButton(self.UnlockerMenu)
        self.stop_process_1.setText("Stop")

        self.current_1 = QtWidgets.QLabel(self.UnlockerMenu)
        self.current_1.setText("Current:")
        self.current_1.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)

        self.progressBar_1 = QtWidgets.QProgressBar(self.UnlockerMenu)
        self.progressBar_1.setProperty("value", 100)

        self.total_1 = QtWidgets.QLabel(self.UnlockerMenu)
        self.total_1.setText("Total:")
        self.total_1.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)

        self.progressBar_2 = QtWidgets.QProgressBar(self.UnlockerMenu)
        self.progressBar_2.setProperty("value", 100)

        self.brand_tab = QtWidgets.QTabWidget(self.UnlockerMenu)

        self.oppo_menu = QtWidgets.QWidget()
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.oppo_menu)
        self.scrollArea = QtWidgets.QScrollArea(self.oppo_menu)
        self.scrollArea.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.scrollArea.setWidgetResizable(True)
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, -182, 255, 684))
        
        self.verticalLayout = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.device_oppo_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.device_oppo_label.setText("Devices list:")
        self.verticalLayout.addWidget(self.device_oppo_label)

        self.oppo_radiobutton1 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.oppo_radiobutton1)
        self.oppo_radiobutton2 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.oppo_radiobutton2)
        self.oppo_radiobutton3 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.oppo_radiobutton3)
        self.oppo_radiobutton4 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.oppo_radiobutton4)
        self.oppo_radiobutton5 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.oppo_radiobutton5)
        self.oppo_radiobutton6 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.oppo_radiobutton6)
        self.oppo_radiobutton7 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.oppo_radiobutton7)
        self.oppo_radiobutton8 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.oppo_radiobutton8)
        self.oppo_radiobutton9 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.oppo_radiobutton9)
        self.oppo_radiobutton10 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.oppo_radiobutton10)
        self.oppo_radiobutton11 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.oppo_radiobutton11)
        self.oppo_radiobutton12 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.oppo_radiobutton12)
        self.oppo_radiobutton13 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.oppo_radiobutton13)
        self.oppo_radiobutton14 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.oppo_radiobutton14)
        self.oppo_radiobutton15 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.oppo_radiobutton15)
        self.oppo_radiobutton16 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.oppo_radiobutton16)
        self.oppo_radiobutton1.setChecked(True)

        self.oppo_radiobutton1.setObjectName("oppo_a33_cph2137");             self.oppo_radiobutton1.setText("Oppo A33")
        self.oppo_radiobutton2.setObjectName("oppo_a53_cph2127");             self.oppo_radiobutton2.setText("Oppo A53")
        self.oppo_radiobutton3.setObjectName("oppo_a53s_cph2139");            self.oppo_radiobutton3.setText("Oppo A53s")
        self.oppo_radiobutton4.setObjectName("oppo_a73_cph2099");             self.oppo_radiobutton4.setText("Oppo A73")
        self.oppo_radiobutton5.setObjectName("oppo_a74_cph2219");             self.oppo_radiobutton5.setText("Oppo A74")
        self.oppo_radiobutton6.setObjectName("oppo_a76_cph2375");             self.oppo_radiobutton6.setText("Oppo A76")
        self.oppo_radiobutton7.setObjectName("oppo_a95_cph2375");             self.oppo_radiobutton7.setText("Oppo A95")
        self.oppo_radiobutton8.setObjectName("oppo_f17_cph2095");             self.oppo_radiobutton8.setText("Oppo F17")
        self.oppo_radiobutton9.setObjectName("oppo_f19_cph2219");             self.oppo_radiobutton9.setText("Oppo F19")
        self.oppo_radiobutton10.setObjectName("oppo_f21pro_cph2219");         self.oppo_radiobutton10.setText("Oppo F21 Pro")
        self.oppo_radiobutton11.setObjectName("oppo_reno4_oldsec_cph2113");   self.oppo_radiobutton11.setText("Oppo Reno4 (Old security)")
        self.oppo_radiobutton12.setObjectName("oppo_reno4_newsec_cph2113");   self.oppo_radiobutton12.setText("Oppo Reno4 (New security)")
        self.oppo_radiobutton13.setObjectName("oppo_reno4pro_cph2109");       self.oppo_radiobutton13.setText("Oppo Reno4 Pro")
        self.oppo_radiobutton14.setObjectName("oppo_reno5_cph2159");          self.oppo_radiobutton14.setText("Oppo Reno5")
        self.oppo_radiobutton15.setObjectName("oppo_reno6_cph2235");          self.oppo_radiobutton15.setText("Oppo Reno6")
        self.oppo_radiobutton16.setObjectName("oppo_reno7_cph2363");          self.oppo_radiobutton16.setText("Oppo Reno7")

        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.horizontalLayout.addWidget(self.scrollArea)

        self.verticalLayout_24 = QtWidgets.QVBoxLayout()
        self.scrollArea_2 = QtWidgets.QScrollArea(self.oppo_menu)
        self.scrollArea_2.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 268, 502))

        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_2)
        self.command_oppo_label = QtWidgets.QLabel(self.scrollAreaWidgetContents_2)
        self.command_oppo_label.setText("Command:")
        self.verticalLayout_2.addWidget(self.command_oppo_label)

        self.command_bbk_radiobutton1 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_2)
        self.verticalLayout_2.addWidget(self.command_bbk_radiobutton1)
        self.command_bbk_radiobutton2 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_2)
        self.verticalLayout_2.addWidget(self.command_bbk_radiobutton2)
        self.command_bbk_radiobutton3 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_2)
        self.verticalLayout_2.addWidget(self.command_bbk_radiobutton3)
        self.command_bbk_radiobutton4 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_2)
        self.verticalLayout_2.addWidget(self.command_bbk_radiobutton4)
        self.command_bbk_radiobutton5 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_2)
        self.verticalLayout_2.addWidget(self.command_bbk_radiobutton5)
        self.command_bbk_radiobutton6 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_2)
        self.verticalLayout_2.addWidget(self.command_bbk_radiobutton6)
        self.command_bbk_radiobutton1.setChecked(True)

        self.command_bbk_radiobutton1.setObjectName("userdata");    self.command_bbk_radiobutton1.setText("Factory reset")
        self.command_bbk_radiobutton2.setObjectName("misc");        self.command_bbk_radiobutton2.setText("Safe format data")
        self.command_bbk_radiobutton3.setObjectName("frp");         self.command_bbk_radiobutton3.setText("Reset FRP")
        self.command_bbk_radiobutton4.setObjectName("efs");         self.command_bbk_radiobutton4.setText("Reset EFS")
        self.command_bbk_radiobutton5.setObjectName("unlock_bl");   self.command_bbk_radiobutton5.setText("Unlock Bootloader")
        self.command_bbk_radiobutton6.setObjectName("relock_bl");   self.command_bbk_radiobutton6.setText("Lock Bootloader")

        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem1)
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_2)
        self.verticalLayout_24.addWidget(self.scrollArea_2)
        self.unlock_button = QtWidgets.QPushButton(self.oppo_menu)
        self.unlock_button.setText("&Unlock")
        self.unlock_button.clicked.connect(self.do_unlock)
        self.verticalLayout_24.addWidget(self.unlock_button)
        self.horizontalLayout.addLayout(self.verticalLayout_24)
        self.brand_tab.addTab(self.oppo_menu, "Oppo")


        self.realme_menu = QtWidgets.QWidget()
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.realme_menu)
        self.scrollArea_4 = QtWidgets.QScrollArea(self.realme_menu)
        self.scrollArea_4.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.scrollArea_4.setWidgetResizable(True)
        self.scrollAreaWidgetContents_4 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_4.setGeometry(QtCore.QRect(0, 0, 269, 502))

        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_4)
        self.device_realme_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.device_realme_label.setText("Devices list:")
        self.verticalLayout_9.addWidget(self.device_realme_label)

        self.realme_radiobutton1 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_4)
        self.verticalLayout_9.addWidget(self.realme_radiobutton1)
        self.realme_radiobutton2 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_4)
        self.verticalLayout_9.addWidget(self.realme_radiobutton2)
        self.realme_radiobutton3 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_4)
        self.verticalLayout_9.addWidget(self.realme_radiobutton3)
        self.realme_radiobutton4 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_4)
        self.verticalLayout_9.addWidget(self.realme_radiobutton4)
        self.realme_radiobutton5 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_4)
        self.verticalLayout_9.addWidget(self.realme_radiobutton5)
        self.realme_radiobutton6 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_4)
        self.verticalLayout_9.addWidget(self.realme_radiobutton6)
        self.realme_radiobutton7 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_4)
        self.verticalLayout_9.addWidget(self.realme_radiobutton7)
        self.realme_radiobutton1.setChecked(True)

        self.realme_radiobutton1.setObjectName("realme6pro_rmx2061");   self.realme_radiobutton1.setText("Realme 6 Pro")
        self.realme_radiobutton2.setObjectName("realme7i_rmx2103");     self.realme_radiobutton2.setText("Realme 7i")
        self.realme_radiobutton3.setObjectName("realme7pro_rmx2170");   self.realme_radiobutton3.setText("Realme 7 Pro")
        self.realme_radiobutton4.setObjectName("realme8pro_rmx3091");   self.realme_radiobutton4.setText("Realme 8 Pro")
        self.realme_radiobutton5.setObjectName("realme9_rmx3521");      self.realme_radiobutton5.setText("Realme 9")
        self.realme_radiobutton6.setObjectName("realmec15_rmx2195");    self.realme_radiobutton6.setText("Realme C15")
        self.realme_radiobutton7.setObjectName("realmec17_rmx2101");    self.realme_radiobutton7.setText("Realme C17")

        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_9.addItem(spacerItem2)
        self.scrollArea_4.setWidget(self.scrollAreaWidgetContents_4)
        self.horizontalLayout_2.addWidget(self.scrollArea_4)

        self.verticalLayout_23 = QtWidgets.QVBoxLayout()
        self.scrollArea_3 = QtWidgets.QScrollArea(self.realme_menu)
        self.scrollArea_3.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.scrollArea_3.setWidgetResizable(True)
        self.scrollAreaWidgetContents_3 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_3.setGeometry(QtCore.QRect(0, 0, 268, 502))

        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_3)
        self.command_realme = QtWidgets.QLabel(self.scrollAreaWidgetContents_3)
        self.command_realme.setText("Command:")
        self.verticalLayout_8.addWidget(self.command_realme)

        self.command_bbk_radiobutton7 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_3)
        self.verticalLayout_8.addWidget(self.command_bbk_radiobutton7)
        self.command_bbk_radiobutton8 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_3)
        self.verticalLayout_8.addWidget(self.command_bbk_radiobutton8)
        self.command_bbk_radiobutton9 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_3)
        self.verticalLayout_8.addWidget(self.command_bbk_radiobutton9)
        self.command_bbk_radiobutton10 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_3)
        self.verticalLayout_8.addWidget(self.command_bbk_radiobutton10)
        self.command_bbk_radiobutton11 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_3)
        self.verticalLayout_8.addWidget(self.command_bbk_radiobutton11)
        self.command_bbk_radiobutton12 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_3)
        self.verticalLayout_8.addWidget(self.command_bbk_radiobutton12)
        self.command_bbk_radiobutton7.setChecked(True)

        self.command_bbk_radiobutton7.setObjectName("userdata");     self.command_bbk_radiobutton7.setText("Factory reset")
        self.command_bbk_radiobutton8.setObjectName("misc");         self.command_bbk_radiobutton8.setText("Safe format data")
        self.command_bbk_radiobutton9.setObjectName("frp");          self.command_bbk_radiobutton9.setText("Reset FRP")
        self.command_bbk_radiobutton10.setObjectName("efs");         self.command_bbk_radiobutton10.setText("Reset EFS")
        self.command_bbk_radiobutton11.setObjectName("unlock_bl");   self.command_bbk_radiobutton11.setText("Unlock Bootloader")
        self.command_bbk_radiobutton12.setObjectName("relock_bl");   self.command_bbk_radiobutton12.setText("Lock Bootloader")

        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_8.addItem(spacerItem3)
        self.scrollArea_3.setWidget(self.scrollAreaWidgetContents_3)
        self.verticalLayout_23.addWidget(self.scrollArea_3)
        self.unlock_button = QtWidgets.QPushButton(self.realme_menu)
        self.unlock_button.setText("&Unlock")
        self.unlock_button.clicked.connect(self.do_unlock)
        self.verticalLayout_23.addWidget(self.unlock_button)
        self.horizontalLayout_2.addLayout(self.verticalLayout_23)
        self.brand_tab.addTab(self.realme_menu, "Realme")


        self.vivo_menu = QtWidgets.QWidget()
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.vivo_menu)
        self.scrollArea_6 = QtWidgets.QScrollArea(self.vivo_menu)
        self.scrollArea_6.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.scrollArea_6.setWidgetResizable(True)
        self.scrollAreaWidgetContents_6 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_6.setGeometry(QtCore.QRect(0, -182, 255, 684))

        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_6)
        self.device_vivo_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.device_vivo_label.setText("Devices list:")
        self.verticalLayout_11.addWidget(self.device_vivo_label)

        self.vivo_radiobutton1 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_6)
        self.verticalLayout_11.addWidget(self.vivo_radiobutton1)
        self.vivo_radiobutton2 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_6)
        self.verticalLayout_11.addWidget(self.vivo_radiobutton2)
        self.vivo_radiobutton3 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_6)
        self.verticalLayout_11.addWidget(self.vivo_radiobutton3)
        self.vivo_radiobutton4 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_6)
        self.verticalLayout_11.addWidget(self.vivo_radiobutton4)
        self.vivo_radiobutton5 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_6)
        self.verticalLayout_11.addWidget(self.vivo_radiobutton5)
        self.vivo_radiobutton6 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_6)
        self.verticalLayout_11.addWidget(self.vivo_radiobutton6)
        self.vivo_radiobutton7 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_6)
        self.verticalLayout_11.addWidget(self.vivo_radiobutton7)
        self.vivo_radiobutton8 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_6)
        self.verticalLayout_11.addWidget(self.vivo_radiobutton8)
        self.vivo_radiobutton9 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_6)
        self.verticalLayout_11.addWidget(self.vivo_radiobutton9)
        self.vivo_radiobutton10 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_6)
        self.verticalLayout_11.addWidget(self.vivo_radiobutton10)
        self.vivo_radiobutton11 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_6)
        self.verticalLayout_11.addWidget(self.vivo_radiobutton11)
        self.vivo_radiobutton12 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_6)
        self.verticalLayout_11.addWidget(self.vivo_radiobutton12)
        self.vivo_radiobutton13 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_6)
        self.verticalLayout_11.addWidget(self.vivo_radiobutton13)
        self.vivo_radiobutton14 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_6)
        self.verticalLayout_11.addWidget(self.vivo_radiobutton14)
        self.vivo_radiobutton15 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_6)
        self.verticalLayout_11.addWidget(self.vivo_radiobutton15)
        self.vivo_radiobutton16 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_6)
        self.verticalLayout_11.addWidget(self.vivo_radiobutton16)
        self.vivo_radiobutton1.setChecked(True)

        self.vivo_radiobutton1.setObjectName("vivo_iq00");          self.vivo_radiobutton1.setText("Vivo IQ00 UI")
        self.vivo_radiobutton2.setObjectName("vivo_y20_oldsec");    self.vivo_radiobutton2.setText("Vivo Y20 (Old security)")
        self.vivo_radiobutton3.setObjectName("vivo_y20_newsec");    self.vivo_radiobutton3.setText("Vivo Y20 (New security)")
        self.vivo_radiobutton4.setObjectName("vivo_y50t");          self.vivo_radiobutton4.setText("Vivo Y50T")
        self.vivo_radiobutton5.setObjectName("vivo_y53");           self.vivo_radiobutton5.setText("Vivo Y53")
        self.vivo_radiobutton6.setObjectName("vivo_y55");           self.vivo_radiobutton6.setText("Vivo Y55/L")
        self.vivo_radiobutton7.setObjectName("vivo_y65");           self.vivo_radiobutton7.setText("Vivo Y65")
        self.vivo_radiobutton8.setObjectName("vivo_y71");           self.vivo_radiobutton8.setText("Vivo Y71")
        self.vivo_radiobutton9.setObjectName("vivo_y91");           self.vivo_radiobutton9.setText("Vivo Y91/i")
        self.vivo_radiobutton10.setObjectName("vivo_y93");          self.vivo_radiobutton10.setText("Vivo Y93")
        self.vivo_radiobutton11.setObjectName("vivo_y95");          self.vivo_radiobutton11.setText("Vivo Y95")
        self.vivo_radiobutton12.setObjectName("vivo_v9");           self.vivo_radiobutton12.setText("Vivo V9")
        self.vivo_radiobutton13.setObjectName("vivo_v9yth");        self.vivo_radiobutton13.setText("Vivo Y9 Youth")
        self.vivo_radiobutton14.setObjectName("vivo_v11pro");       self.vivo_radiobutton14.setText("Vivo V11 Pro")
        self.vivo_radiobutton15.setObjectName("vivo_v20_newsec");   self.vivo_radiobutton15.setText("Vivo V20")
        self.vivo_radiobutton16.setObjectName("vivo_v21e");         self.vivo_radiobutton16.setText("Vivo V21E")

        spacerItem4 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_11.addItem(spacerItem4)
        self.scrollArea_6.setWidget(self.scrollAreaWidgetContents_6)
        self.horizontalLayout_3.addWidget(self.scrollArea_6)

        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.scrollArea_5 = QtWidgets.QScrollArea(self.vivo_menu)
        self.scrollArea_5.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.scrollArea_5.setWidgetResizable(True)
        self.scrollAreaWidgetContents_5 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_5.setGeometry(QtCore.QRect(0, 0, 268, 502))

        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_5)
        self.command_vivo = QtWidgets.QLabel(self.scrollAreaWidgetContents_5)
        self.command_vivo.setText("Command:")
        self.verticalLayout_10.addWidget(self.command_vivo)

        self.command_bbk_radiobutton13 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_5)
        self.verticalLayout_10.addWidget(self.command_bbk_radiobutton13)
        self.command_bbk_radiobutton14 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_5)
        self.verticalLayout_10.addWidget(self.command_bbk_radiobutton14)
        self.command_bbk_radiobutton15 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_5)
        self.verticalLayout_10.addWidget(self.command_bbk_radiobutton15)
        self.command_bbk_radiobutton16 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_5)
        self.verticalLayout_10.addWidget(self.command_bbk_radiobutton16)
        self.command_bbk_radiobutton17 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_5)
        self.verticalLayout_10.addWidget(self.command_bbk_radiobutton17)
        self.command_bbk_radiobutton18 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_5)
        self.verticalLayout_10.addWidget(self.command_bbk_radiobutton18)
        self.command_bbk_radiobutton13.setChecked(True)

        self.command_bbk_radiobutton13.setObjectName("userdata");    self.command_bbk_radiobutton13.setText("Factory reset")
        self.command_bbk_radiobutton14.setObjectName("misc");        self.command_bbk_radiobutton14.setText("Safe format data")
        self.command_bbk_radiobutton15.setObjectName("frp");         self.command_bbk_radiobutton15.setText("Reset FRP")
        self.command_bbk_radiobutton16.setObjectName("efs");         self.command_bbk_radiobutton16.setText("Reset EFS")
        self.command_bbk_radiobutton17.setObjectName("unlock_bl");   self.command_bbk_radiobutton17.setText("Unlock Bootloader")
        self.command_bbk_radiobutton18.setObjectName("relock_bl");   self.command_bbk_radiobutton18.setText("Lock Bootloader")

        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_10.addItem(spacerItem5)
        self.scrollArea_5.setWidget(self.scrollAreaWidgetContents_5)
        self.verticalLayout_6.addWidget(self.scrollArea_5)
        self.unlock_button = QtWidgets.QPushButton(self.vivo_menu)
        self.unlock_button.setText("&Unlock")
        self.unlock_button.clicked.connect(self.do_unlock)
        self.verticalLayout_6.addWidget(self.unlock_button)
        self.horizontalLayout_3.addLayout(self.verticalLayout_6)
        self.brand_tab.addTab(self.vivo_menu, "Vivo")


        self.xiaomi_poco_menu = QtWidgets.QWidget()
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.xiaomi_poco_menu)
        self.scrollArea_8 = QtWidgets.QScrollArea(self.xiaomi_poco_menu)
        self.scrollArea_8.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.scrollArea_8.setWidgetResizable(True)
        self.scrollAreaWidgetContents_8 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_8.setGeometry(QtCore.QRect(0, -812, 255, 1314))

        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_8)
        self.device_xiaomi_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.device_xiaomi_label.setText("Devices list:")
        self.verticalLayout_13.addWidget(self.device_xiaomi_label)

        self.xiaomi_radiobutton1 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton1)
        self.xiaomi_radiobutton2 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton2)
        self.xiaomi_radiobutton3 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton3)
        self.xiaomi_radiobutton4 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton4)
        self.xiaomi_radiobutton5 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton5)
        self.xiaomi_radiobutton6 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton6)
        self.xiaomi_radiobutton7 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton7)
        self.xiaomi_radiobutton8 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton8)
        self.xiaomi_radiobutton9 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton9)
        self.xiaomi_radiobutton10 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton10)
        self.xiaomi_radiobutton11 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton11)
        self.xiaomi_radiobutton12 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton12)
        self.xiaomi_radiobutton13 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton13)
        self.xiaomi_radiobutton14 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton14)
        self.xiaomi_radiobutton15 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton15)
        self.xiaomi_radiobutton16 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton16)
        self.xiaomi_radiobutton17 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton17)
        self.xiaomi_radiobutton18 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton18)
        self.xiaomi_radiobutton19 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton19)
        self.xiaomi_radiobutton20 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton20)
        self.xiaomi_radiobutton21 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton21)
        self.xiaomi_radiobutton22 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton22)
        self.xiaomi_radiobutton23 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton23)
        self.xiaomi_radiobutton24 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton24)
        self.xiaomi_radiobutton25 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton25)
        self.xiaomi_radiobutton26 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton26)
        self.xiaomi_radiobutton27 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton27)
        self.xiaomi_radiobutton28 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton28)
        self.xiaomi_radiobutton29 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton29)
        self.xiaomi_radiobutton30 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton30)
        self.xiaomi_radiobutton31 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton31)
        self.xiaomi_radiobutton32 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_8)
        self.verticalLayout_13.addWidget(self.xiaomi_radiobutton32)
        self.xiaomi_radiobutton1.setChecked(True)

        self.xiaomi_radiobutton1.setObjectName("mi8ee_ursa");             self.xiaomi_radiobutton1.setText("Xiaomi Mi 8 EE")
        self.xiaomi_radiobutton2.setObjectName("mi8se_sirius");           self.xiaomi_radiobutton2.setText("Xiaomi Mi 8 SE")
        self.xiaomi_radiobutton3.setObjectName("mi8ud_equuleus");         self.xiaomi_radiobutton3.setText("Xiaomi Mi 8 UD")
        self.xiaomi_radiobutton4.setObjectName("mi9t_rapahel");           self.xiaomi_radiobutton4.setText("Xiaomi Mi 9T")
        self.xiaomi_radiobutton5.setObjectName("mi10lite_toco");          self.xiaomi_radiobutton5.setText("Xiaomi Mi 10 Lite")
        self.xiaomi_radiobutton6.setObjectName("mi11tpro_vili");          self.xiaomi_radiobutton6.setText("Xiaomi 11T Pro")
        self.xiaomi_radiobutton7.setObjectName("mia2_jasime");            self.xiaomi_radiobutton7.setText("Xiaomi Mi A2")
        self.xiaomi_radiobutton8.setObjectName("mia2lite_daisy");         self.xiaomi_radiobutton8.setText("Xiaomi Mi A2 Lite")
        self.xiaomi_radiobutton9.setObjectName("mimax2_chiron");          self.xiaomi_radiobutton9.setText("Xiaomi Mi Max 2")
        self.xiaomi_radiobutton10.setObjectName("mimax3_nitrogen");       self.xiaomi_radiobutton10.setText("Xiaomi Mi Max 3")
        self.xiaomi_radiobutton11.setObjectName("mimix_lithium");         self.xiaomi_radiobutton11.setText("Xiaomi Mi Mix")
        self.xiaomi_radiobutton12.setObjectName("mimix2s_polaris");       self.xiaomi_radiobutton12.setText("Xiaomi Mi Mix 2S")
        self.xiaomi_radiobutton13.setObjectName("mimix3_perseus");        self.xiaomi_radiobutton13.setText("Xiaomi Mi Mix 3")
        self.xiaomi_radiobutton14.setObjectName("minote2_scorpio");       self.xiaomi_radiobutton14.setText("Xiaomi Mi Note 2")
        self.xiaomi_radiobutton15.setObjectName("minote3_jason");         self.xiaomi_radiobutton15.setText("Xiaomi Mi Note 3")
        self.xiaomi_radiobutton16.setObjectName("mipad4_clover");         self.xiaomi_radiobutton16.setText("Xiaomi Mi Pad 4")
        self.xiaomi_radiobutton17.setObjectName("pocof1_beryllium");      self.xiaomi_radiobutton17.setText("Xiaomi Poco F1")
        self.xiaomi_radiobutton18.setObjectName("pocom2pro_gramin");      self.xiaomi_radiobutton18.setText("Xiaomi Poco M2 Pro")
        self.xiaomi_radiobutton19.setObjectName("pocom3_citrus");         self.xiaomi_radiobutton19.setText("Xiaomi Poco M3")
        self.xiaomi_radiobutton20.setObjectName("redmi5a_riva");          self.xiaomi_radiobutton20.setText("Xiaomi Redmi 5A")
        self.xiaomi_radiobutton21.setObjectName("redmi6pro_sakura");      self.xiaomi_radiobutton21.setText("Xiaomi Redmi 6 Pro")
        self.xiaomi_radiobutton22.setObjectName("redmi7_onclite");        self.xiaomi_radiobutton22.setText("Xiaomi Redmi 7")
        self.xiaomi_radiobutton23.setObjectName("redmi9t_lime");          self.xiaomi_radiobutton23.setText("Xiaomi Redmi 9T")
        self.xiaomi_radiobutton24.setObjectName("redmik20pro_raphael");   self.xiaomi_radiobutton24.setText("Xiaomi Redmi K20 Pro")
        self.xiaomi_radiobutton25.setObjectName("note5_whyred");          self.xiaomi_radiobutton25.setText("Xiaomi Redmi Note 5")
        self.xiaomi_radiobutton26.setObjectName("note5pro_whyred");       self.xiaomi_radiobutton26.setText("Xiaomi Redmi Note 5 Pro")
        self.xiaomi_radiobutton27.setObjectName("note5a_ugglite");        self.xiaomi_radiobutton27.setText("Xiaomi Redmi Note 5A")
        self.xiaomi_radiobutton28.setObjectName("note6pro_tulip");        self.xiaomi_radiobutton28.setText("Xiaomi Redmi Note 6 Pro")
        self.xiaomi_radiobutton29.setObjectName("note7_lavender");        self.xiaomi_radiobutton29.setText("Xiaomi Redmi Note 7")
        self.xiaomi_radiobutton30.setObjectName("note8_ginkgo");          self.xiaomi_radiobutton30.setText("Xiaomi Redmi Note 8")
        self.xiaomi_radiobutton31.setObjectName("note9s_curtana");        self.xiaomi_radiobutton31.setText("Xiaomi Redmi Note 9S")
        self.xiaomi_radiobutton32.setObjectName("note9pro_joyeuse");      self.xiaomi_radiobutton32.setText("Xiaomi Redmi Note 9 Pro")

        spacerItem6 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_13.addItem(spacerItem6)
        self.scrollArea_8.setWidget(self.scrollAreaWidgetContents_8)
        self.horizontalLayout_4.addWidget(self.scrollArea_8)

        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.scrollArea_7 = QtWidgets.QScrollArea(self.xiaomi_poco_menu)
        self.scrollArea_7.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.scrollArea_7.setWidgetResizable(True)
        self.scrollAreaWidgetContents_7 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_7.setGeometry(QtCore.QRect(0, 0, 268, 502))

        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_7)
        self.command_xiaomi = QtWidgets.QLabel(self.scrollAreaWidgetContents_7)
        self.command_xiaomi.setText("Command:")
        self.verticalLayout_12.addWidget(self.command_xiaomi)

        self.command_mi_radiobutton1 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_7)
        self.verticalLayout_12.addWidget(self.command_mi_radiobutton1)
        self.command_mi_radiobutton2 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_7)
        self.verticalLayout_12.addWidget(self.command_mi_radiobutton2)
        self.command_mi_radiobutton3 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_7)
        self.verticalLayout_12.addWidget(self.command_mi_radiobutton3)
        self.command_mi_radiobutton4 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_7)
        self.verticalLayout_12.addWidget(self.command_mi_radiobutton4)
        self.command_mi_radiobutton5 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_7)
        self.verticalLayout_12.addWidget(self.command_mi_radiobutton5)
        self.command_mi_radiobutton6 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_7)
        self.verticalLayout_12.addWidget(self.command_mi_radiobutton6)
        self.command_mi_radiobutton7 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_7)
        self.verticalLayout_12.addWidget(self.command_mi_radiobutton7)
        self.command_mi_radiobutton1.setChecked(True)

        self.command_mi_radiobutton1.setObjectName("userdata");    self.command_mi_radiobutton1.setText("Factory reset")
        self.command_mi_radiobutton2.setObjectName("misc");        self.command_mi_radiobutton2.setText("Safe format data")
        self.command_mi_radiobutton3.setObjectName("micloud");     self.command_mi_radiobutton3.setText("Reset MiCloud")
        self.command_mi_radiobutton4.setObjectName("frp");         self.command_mi_radiobutton4.setText("Reset FRP")
        self.command_mi_radiobutton5.setObjectName("efs");         self.command_mi_radiobutton5.setText("Reset EFS")
        self.command_mi_radiobutton6.setObjectName("unlock_bl");   self.command_mi_radiobutton6.setText("Unlock Bootloader")
        self.command_mi_radiobutton7.setObjectName("relock_bl");   self.command_mi_radiobutton7.setText("Lock Bootloader")

        spacerItem7 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_12.addItem(spacerItem7)
        self.scrollArea_7.setWidget(self.scrollAreaWidgetContents_7)
        self.verticalLayout_5.addWidget(self.scrollArea_7)
        self.unlock_button = QtWidgets.QPushButton(self.xiaomi_poco_menu)
        self.unlock_button.setText("&Unlock")
        self.unlock_button.clicked.connect(self.do_unlock)
        self.verticalLayout_5.addWidget(self.unlock_button)
        self.horizontalLayout_4.addLayout(self.verticalLayout_5)
        self.brand_tab.addTab(self.xiaomi_poco_menu, "Xiaomi / Poco")


        self.samsung_menu = QtWidgets.QWidget()
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.samsung_menu)
        self.scrollArea_10 = QtWidgets.QScrollArea(self.samsung_menu)
        self.scrollArea_10.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.scrollArea_10.setWidgetResizable(True)
        self.scrollAreaWidgetContents_10 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_10.setGeometry(QtCore.QRect(0, 0, 269, 502))

        self.verticalLayout_15 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_10)
        self.device_samsung_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.device_samsung_label.setText("Devices list:")
        self.verticalLayout_15.addWidget(self.device_samsung_label)

        self.samsung_radiobutton1 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_10)
        self.verticalLayout_15.addWidget(self.samsung_radiobutton1)
        self.samsung_radiobutton2 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_10)
        self.verticalLayout_15.addWidget(self.samsung_radiobutton2)
        self.samsung_radiobutton3 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_10)
        self.verticalLayout_15.addWidget(self.samsung_radiobutton3)
        self.samsung_radiobutton4 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_10)
        self.verticalLayout_15.addWidget(self.samsung_radiobutton4)
        self.samsung_radiobutton5 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_10)
        self.verticalLayout_15.addWidget(self.samsung_radiobutton5)
        self.samsung_radiobutton6 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_10)
        self.verticalLayout_15.addWidget(self.samsung_radiobutton6)
        self.samsung_radiobutton7 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_10)
        self.verticalLayout_15.addWidget(self.samsung_radiobutton7)
        self.samsung_radiobutton8 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_10)
        self.verticalLayout_15.addWidget(self.samsung_radiobutton8)
        self.samsung_radiobutton9 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_10)
        self.verticalLayout_15.addWidget(self.samsung_radiobutton9)
        self.samsung_radiobutton10 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_10)
        self.verticalLayout_15.addWidget(self.samsung_radiobutton10)
        self.samsung_radiobutton1.setChecked(True)

        self.samsung_radiobutton1.setObjectName("sm_a015f");    self.samsung_radiobutton1.setText("Samsung A01 [SM-A015F]")
        self.samsung_radiobutton2.setObjectName("sm_a025f");    self.samsung_radiobutton2.setText("Samsung A02 [SM-A025F]")
        self.samsung_radiobutton3.setObjectName("sm_a115a");    self.samsung_radiobutton3.setText("Samsung A11 [SM-A115A]")
        self.samsung_radiobutton4.setObjectName("sm_a115f");    self.samsung_radiobutton4.setText("Samsung A11 [SM-A115F]")
        self.samsung_radiobutton5.setObjectName("sm_a115u");    self.samsung_radiobutton5.setText("Samsung A11 [SM-A115U]")
        self.samsung_radiobutton6.setObjectName("sm_a705f");    self.samsung_radiobutton6.setText("Samsung A70 [SM-A705F]")
        self.samsung_radiobutton7.setObjectName("sm_j415f");    self.samsung_radiobutton7.setText("Samsung J4 Plus [SM-J415F]")
        self.samsung_radiobutton8.setObjectName("sm_j610f");    self.samsung_radiobutton8.setText("Samsung J6 Plus [SM-J610F]")
        self.samsung_radiobutton9.setObjectName("sm_m025f");    self.samsung_radiobutton9.setText("Samsung M02s [SM-M025F]")
        self.samsung_radiobutton10.setObjectName("sm_m115f");   self.samsung_radiobutton10.setText("Samsung M11 [SM-M115F]")

        spacerItem8 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_15.addItem(spacerItem8)
        self.scrollArea_10.setWidget(self.scrollAreaWidgetContents_10)
        self.horizontalLayout_5.addWidget(self.scrollArea_10)

        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.scrollArea_9 = QtWidgets.QScrollArea(self.samsung_menu)
        self.scrollArea_9.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.scrollArea_9.setWidgetResizable(True)
        self.scrollAreaWidgetContents_9 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_9.setGeometry(QtCore.QRect(0, 0, 268, 502))

        self.verticalLayout_14 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_9)
        self.command_samsung = QtWidgets.QLabel(self.scrollAreaWidgetContents_9)
        self.command_samsung.setText("Command:")
        self.verticalLayout_14.addWidget(self.command_samsung)

        self.command_sam_radiobutton1 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_9)
        self.verticalLayout_14.addWidget(self.command_sam_radiobutton1)
        self.command_sam_radiobutton2 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_9)
        self.verticalLayout_14.addWidget(self.command_sam_radiobutton2)
        self.command_sam_radiobutton3 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_9)
        self.verticalLayout_14.addWidget(self.command_sam_radiobutton3)
        self.command_sam_radiobutton4 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_9)
        self.verticalLayout_14.addWidget(self.command_sam_radiobutton4)
        self.command_sam_radiobutton1.setChecked(True)

        self.command_sam_radiobutton1.setObjectName("userdata");    self.command_sam_radiobutton1.setText("Factory reset")
        self.command_sam_radiobutton2.setObjectName("misc");        self.command_sam_radiobutton2.setText("Safe format data")
        self.command_sam_radiobutton3.setObjectName("frp");         self.command_sam_radiobutton3.setText("Reset FRP")
        self.command_sam_radiobutton4.setObjectName("efs");         self.command_sam_radiobutton4.setText("Reset EFS")

        spacerItem9 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_14.addItem(spacerItem9)
        self.scrollArea_9.setWidget(self.scrollAreaWidgetContents_9)
        self.verticalLayout_4.addWidget(self.scrollArea_9)
        self.unlock_button = QtWidgets.QPushButton(self.samsung_menu)
        self.unlock_button.setText("&Unlock")
        self.unlock_button.clicked.connect(self.do_unlock)
        self.verticalLayout_4.addWidget(self.unlock_button)
        self.horizontalLayout_5.addLayout(self.verticalLayout_4)
        self.brand_tab.addTab(self.samsung_menu, "Samsung")


        self.adb_fastboot_menu = QtWidgets.QWidget()
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.adb_fastboot_menu)
        self.scrollArea_12 = QtWidgets.QScrollArea(self.adb_fastboot_menu)
        self.scrollArea_12.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.scrollArea_12.setWidgetResizable(True)
        self.scrollAreaWidgetContents_12 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_12.setGeometry(QtCore.QRect(0, 0, 269, 502))

        self.verticalLayout_17 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_12)
        self.adb_fastboot_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.adb_fastboot_label.setText("Method list:")
        self.verticalLayout_17.addWidget(self.adb_fastboot_label)

        self.adb_radiobutton1 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_12)
        self.verticalLayout_17.addWidget(self.adb_radiobutton1)
        self.adb_radiobutton1.setText("ADB mode")
        self.adb_radiobutton1.clicked.connect(self.getadb_method)

        self.adb_radiobutton2 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_12)
        self.verticalLayout_17.addWidget(self.adb_radiobutton2)
        self.adb_radiobutton2.setText("Fastboot mode")
        self.adb_radiobutton2.setChecked(True)
        self.adb_radiobutton2.clicked.connect(self.getadb_method)

        spacerItem10 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_17.addItem(spacerItem10)
        self.scrollArea_12.setWidget(self.scrollAreaWidgetContents_12)
        self.horizontalLayout_6.addWidget(self.scrollArea_12)

        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.scrollArea_11 = QtWidgets.QScrollArea(self.adb_fastboot_menu)
        self.scrollArea_11.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.scrollArea_11.setWidgetResizable(True)
        self.scrollAreaWidgetContents_11 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_11.setGeometry(QtCore.QRect(0, 0, 268, 502))

        self.verticalLayout_16 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_11)
        self.fastboot_label = QtWidgets.QLabel(self.scrollAreaWidgetContents_11)
        self.fastboot_label.setText("Fastboot function:")
        self.verticalLayout_16.addWidget(self.fastboot_label)

        self.command_uni_radiobutton1 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_11)
        self.verticalLayout_16.addWidget(self.command_uni_radiobutton1)
        self.command_uni_radiobutton2 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_11)
        self.verticalLayout_16.addWidget(self.command_uni_radiobutton2)
        self.command_uni_radiobutton3 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_11)
        self.verticalLayout_16.addWidget(self.command_uni_radiobutton3)
        self.command_uni_radiobutton4 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_11)
        self.verticalLayout_16.addWidget(self.command_uni_radiobutton4)
        self.command_uni_radiobutton5 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_11)
        self.verticalLayout_16.addWidget(self.command_uni_radiobutton5)
        self.command_uni_radiobutton6 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_11)
        self.verticalLayout_16.addWidget(self.command_uni_radiobutton6)
        self.command_uni_radiobutton7 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_11)
        self.verticalLayout_16.addWidget(self.command_uni_radiobutton7)
        self.command_uni_radiobutton8 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_11)
        self.verticalLayout_16.addWidget(self.command_uni_radiobutton8)
        self.command_uni_radiobutton9 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_11)
        self.verticalLayout_16.addWidget(self.command_uni_radiobutton9)

        self.command_uni_radiobutton1.setObjectName("unlock_bl_1");        self.command_uni_radiobutton1.setText("Unlock Bootloader (Method 1)")
        self.command_uni_radiobutton2.setObjectName("unlock_bl_2");        self.command_uni_radiobutton2.setText("Unlock Bootloader (Method 2)")
        self.command_uni_radiobutton3.setObjectName("relock_bl_1");        self.command_uni_radiobutton3.setText("Lock Bootloader (Method 1)")
        self.command_uni_radiobutton4.setObjectName("relock_bl_2");        self.command_uni_radiobutton4.setText("Lock Bootloader (Method 2)")
        self.command_uni_radiobutton5.setObjectName("fastboot_edl_1");     self.command_uni_radiobutton5.setText("Reboot to EDL (Method 1)")
        self.command_uni_radiobutton6.setObjectName("fastboot_edl_2");     self.command_uni_radiobutton6.setText("Reboot to EDL (Method 2)")
        self.command_uni_radiobutton7.setObjectName("fastboot_frp");       self.command_uni_radiobutton7.setText("Reset FRP")
        self.command_uni_radiobutton8.setObjectName("fastboot_demo_1");    self.command_uni_radiobutton8.setText("Reset Demo mode (Method 1)")
        self.command_uni_radiobutton9.setObjectName("fastboot_demo_2");    self.command_uni_radiobutton9.setText("Reset Demo mode (Method 2)")

        self.space_1 = QtWidgets.QLabel(self.scrollAreaWidgetContents_11)
        self.samadb_test_mode_label = QtWidgets.QLabel(self.scrollAreaWidgetContents_11)
        self.samadb_test_mode_label.setText("Samsung Test mode:")
        self.verticalLayout_16.addWidget(self.space_1)
        self.verticalLayout_16.addWidget(self.samadb_test_mode_label)

        self.command_uni_radiobutton10 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_11)
        self.verticalLayout_16.addWidget(self.command_uni_radiobutton10)
        self.command_uni_radiobutton11 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_11)
        self.verticalLayout_16.addWidget(self.command_uni_radiobutton11)
        self.command_uni_radiobutton12 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_11)
        self.verticalLayout_16.addWidget(self.command_uni_radiobutton12)

        self.command_uni_radiobutton10.setObjectName("adb_frp");        self.command_uni_radiobutton10.setText("ADB Samsung FRP")
        self.command_uni_radiobutton11.setObjectName("adb_erasefrp");   self.command_uni_radiobutton11.setText("Erase FRP ADB on")
        self.command_uni_radiobutton12.setObjectName("adb_pushfrp");    self.command_uni_radiobutton12.setText("Push FRP ADB CMD")

        self.space_2 = QtWidgets.QLabel(self.scrollAreaWidgetContents_11)
        self.adb_debugging_label = QtWidgets.QLabel(self.scrollAreaWidgetContents_11)
        self.adb_debugging_label.setText("ADB Debugging:")
        self.verticalLayout_16.addWidget(self.space_2)
        self.verticalLayout_16.addWidget(self.adb_debugging_label)

        self.command_uni_radiobutton13 = QtWidgets.QRadioButton(self.scrollAreaWidgetContents_11)
        self.verticalLayout_16.addWidget(self.command_uni_radiobutton13)
        self.command_uni_radiobutton13.setObjectName("oppo_demo")
        self.command_uni_radiobutton13.setText("Oppo Demo phone")
        self.setadb_method()

        spacerItem11 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_16.addItem(spacerItem11)
        self.scrollArea_11.setWidget(self.scrollAreaWidgetContents_11)
        self.verticalLayout_3.addWidget(self.scrollArea_11)
        self.unlock_button = QtWidgets.QPushButton(self.adb_fastboot_menu)
        self.unlock_button.setText("&Unlock")
        self.unlock_button.clicked.connect(self.do_unlock)
        self.verticalLayout_3.addWidget(self.unlock_button)
        self.horizontalLayout_6.addLayout(self.verticalLayout_3)

        self.brand_tab.addTab(self.adb_fastboot_menu, "ADB && Fastboot")

        self.tab.addTab(self.UnlockerMenu, "Unlocker")


        self.setCentralWidget(self.centralwidget)



        self.menuBar = QtWidgets.QMenuBar(self)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 1024, 21))

        self.menuFile = QtWidgets.QMenu(self.menuBar)
        self.menuFile.setTitle("&File")

        self.menuTools = QtWidgets.QMenu(self.menuBar)
        self.menuTools.setTitle("&Tools")

        self.menuHelp = QtWidgets.QMenu(self.menuBar)
        self.menuHelp.setTitle("&Help")

        self.setMenuBar(self.menuBar)

        self.action_System_Monitor = QtWidgets.QAction(self)
        self.action_System_Monitor.setText("Open &System Monitor")
        self.action_System_Monitor.setShortcut("Ctrl+Shift+T")
        self.action_System_Monitor.triggered.connect(self.openMonitor)
        self.menuFile.addAction(self.action_System_Monitor)

        if platform.system() == "Windows":
            self.action_Device_Manager = QtWidgets.QAction(self)
            self.action_Device_Manager.setText("Open &Device Manager")
            self.action_Device_Manager.setShortcut("Ctrl+Shift+D")
            self.action_Device_Manager.triggered.connect(self.openDevice_Manager)
            self.menuFile.addAction(self.action_Device_Manager)

        self.menuFile.addSeparator()

        self.action_Quit = QtWidgets.QAction(self)
        self.action_Quit.setText("&Quit")
        self.action_Quit.triggered.connect(quit)
        self.menuFile.addAction(self.action_Quit)

        self.action_Driver = QtWidgets.QAction(self)
        self.action_Driver.setText("Setup &driver")
        self.action_Driver.triggered.connect(self.open_installDrivers)
        self.menuTools.addAction(self.action_Driver)

        self.action_Show_log = QtWidgets.QAction(self)
        self.action_Show_log.setText("Show &log")
        self.action_Show_log.triggered.connect(self.open_logFolder)
        self.menuHelp.addAction(self.action_Show_log)

        self.action_Read_license = QtWidgets.QAction(self)
        self.action_Read_license.setText("&Read license")
        self.action_Read_license.triggered.connect(self.openLicense)
        self.menuHelp.addAction(self.action_Read_license)

        self.action_Check_updates = QtWidgets.QAction(self)
        self.action_Check_updates.setText("&Check updates")
        self.action_Check_updates.triggered.connect(self.checkUpdates)
        self.menuHelp.addAction(self.action_Check_updates)

        self.menuHelp.addSeparator()

        self.action_About = QtWidgets.QAction(self)
        self.action_About.setText("&About this tools...")
        self.action_About.setShortcut("F1")
        self.action_About.triggered.connect(self.openAbout)
        self.menuHelp.addAction(self.action_About)

        self.menuBar.addAction(self.menuFile.menuAction())
        self.menuBar.addAction(self.menuTools.menuAction())
        self.menuBar.addAction(self.menuHelp.menuAction())

        if platform.system() == "Windows":
            self.tab.setGeometry(QtCore.QRect(10, 10, 1001, 611))

            self.port_list_1.setGeometry(QtCore.QRect(588, 7, 321, 22))
            self.refresh_port_1.setGeometry(QtCore.QRect(916, 7, 81, 22))
            self.log_process_1.setGeometry(QtCore.QRect(587, 40, 411, 451))
            self.stop_process_1.setGeometry(QtCore.QRect(930, 511, 61, 51))
            self.current_1.setGeometry(QtCore.QRect(595, 510, 41, 20))
            self.progressBar_1.setGeometry(QtCore.QRect(644, 509, 281, 23))
            self.total_1.setGeometry(QtCore.QRect(595, 541, 41, 20))
            self.progressBar_2.setGeometry(QtCore.QRect(644, 540, 281, 23))
            self.brand_tab.setGeometry(QtCore.QRect(7, 7, 571, 561))
        else:
            self.tab.setGeometry(QtCore.QRect(10, 10, 1001, 601))

            self.port_list_1.setGeometry(QtCore.QRect(588, 7, 321, 31))
            self.refresh_port_1.setGeometry(QtCore.QRect(916, 7, 81, 31))
            self.log_process_1.setGeometry(QtCore.QRect(587, 50, 411, 421))
            self.stop_process_1.setGeometry(QtCore.QRect(930, 491, 61, 51))
            self.current_1.setGeometry(QtCore.QRect(595, 490, 51, 20))
            self.progressBar_1.setGeometry(QtCore.QRect(654, 520, 271, 23))
            self.total_1.setGeometry(QtCore.QRect(595, 521, 51, 20))
            self.progressBar_2.setGeometry(QtCore.QRect(654, 489, 271, 23))
            self.brand_tab.setGeometry(QtCore.QRect(7, 7, 571, 541))

        self.check_port()

        QtCore.QMetaObject.connectSlotsByName(self)


    def getdevices(self):
        if self.brand_tab.currentIndex() == 0:
            if self.oppo_radiobutton1.isChecked():      return self.oppo_radiobutton1.objectName()
            if self.oppo_radiobutton2.isChecked():      return self.oppo_radiobutton2.objectName()
            if self.oppo_radiobutton3.isChecked():      return self.oppo_radiobutton3.objectName()
            if self.oppo_radiobutton4.isChecked():      return self.oppo_radiobutton4.objectName()
            if self.oppo_radiobutton5.isChecked():      return self.oppo_radiobutton5.objectName()
            if self.oppo_radiobutton6.isChecked():      return self.oppo_radiobutton6.objectName()
            if self.oppo_radiobutton7.isChecked():      return self.oppo_radiobutton7.objectName()
            if self.oppo_radiobutton8.isChecked():      return self.oppo_radiobutton8.objectName()
            if self.oppo_radiobutton9.isChecked():      return self.oppo_radiobutton9.objectName()
            if self.oppo_radiobutton10.isChecked():     return self.oppo_radiobutton10.objectName()
            if self.oppo_radiobutton11.isChecked():     return self.oppo_radiobutton11.objectName()
            if self.oppo_radiobutton12.isChecked():     return self.oppo_radiobutton12.objectName()
            if self.oppo_radiobutton13.isChecked():     return self.oppo_radiobutton13.objectName()
            if self.oppo_radiobutton14.isChecked():     return self.oppo_radiobutton14.objectName()
            if self.oppo_radiobutton15.isChecked():     return self.oppo_radiobutton15.objectName()
            if self.oppo_radiobutton16.isChecked():     return self.oppo_radiobutton16.objectName()

        if self.brand_tab.currentIndex() == 1:
            if self.realme_radiobutton1.isChecked():    return self.realme_radiobutton1.objectName()
            if self.realme_radiobutton2.isChecked():    return self.realme_radiobutton2.objectName()
            if self.realme_radiobutton3.isChecked():    return self.realme_radiobutton3.objectName()
            if self.realme_radiobutton4.isChecked():    return self.realme_radiobutton4.objectName()
            if self.realme_radiobutton5.isChecked():    return self.realme_radiobutton5.objectName()
            if self.realme_radiobutton6.isChecked():    return self.realme_radiobutton6.objectName()
            if self.realme_radiobutton7.isChecked():    return self.realme_radiobutton7.objectName()

        if self.brand_tab.currentIndex() == 2:
            if self.vivo_radiobutton1.isChecked():      return self.vivo_radiobutton1.objectName()
            if self.vivo_radiobutton2.isChecked():      return self.vivo_radiobutton2.objectName()
            if self.vivo_radiobutton3.isChecked():      return self.vivo_radiobutton3.objectName()
            if self.vivo_radiobutton4.isChecked():      return self.vivo_radiobutton4.objectName()
            if self.vivo_radiobutton5.isChecked():      return self.vivo_radiobutton5.objectName()
            if self.vivo_radiobutton6.isChecked():      return self.vivo_radiobutton6.objectName()
            if self.vivo_radiobutton7.isChecked():      return self.vivo_radiobutton7.objectName()
            if self.vivo_radiobutton8.isChecked():      return self.vivo_radiobutton8.objectName()
            if self.vivo_radiobutton9.isChecked():      return self.vivo_radiobutton9.objectName()
            if self.vivo_radiobutton10.isChecked():     return self.vivo_radiobutton10.objectName()
            if self.vivo_radiobutton11.isChecked():     return self.vivo_radiobutton11.objectName()
            if self.vivo_radiobutton12.isChecked():     return self.vivo_radiobutton12.objectName()
            if self.vivo_radiobutton13.isChecked():     return self.vivo_radiobutton13.objectName()
            if self.vivo_radiobutton14.isChecked():     return self.vivo_radiobutton14.objectName()
            if self.vivo_radiobutton15.isChecked():     return self.vivo_radiobutton15.objectName()
            if self.vivo_radiobutton16.isChecked():     return self.vivo_radiobutton16.objectName()

        if self.brand_tab.currentIndex() == 3:
            if self.xiaomi_radiobutton1.isChecked():    return self.xiaomi_radiobutton1.objectName()
            if self.xiaomi_radiobutton2.isChecked():    return self.xiaomi_radiobutton2.objectName()
            if self.xiaomi_radiobutton3.isChecked():    return self.xiaomi_radiobutton3.objectName()
            if self.xiaomi_radiobutton4.isChecked():    return self.xiaomi_radiobutton4.objectName()
            if self.xiaomi_radiobutton5.isChecked():    return self.xiaomi_radiobutton5.objectName()
            if self.xiaomi_radiobutton6.isChecked():    return self.xiaomi_radiobutton6.objectName()
            if self.xiaomi_radiobutton7.isChecked():    return self.xiaomi_radiobutton7.objectName()
            if self.xiaomi_radiobutton8.isChecked():    return self.xiaomi_radiobutton8.objectName()
            if self.xiaomi_radiobutton9.isChecked():    return self.xiaomi_radiobutton9.objectName()
            if self.xiaomi_radiobutton10.isChecked():   return self.xiaomi_radiobutton10.objectName()
            if self.xiaomi_radiobutton11.isChecked():   return self.xiaomi_radiobutton11.objectName()
            if self.xiaomi_radiobutton12.isChecked():   return self.xiaomi_radiobutton12.objectName()
            if self.xiaomi_radiobutton13.isChecked():   return self.xiaomi_radiobutton13.objectName()
            if self.xiaomi_radiobutton14.isChecked():   return self.xiaomi_radiobutton14.objectName()
            if self.xiaomi_radiobutton15.isChecked():   return self.xiaomi_radiobutton15.objectName()
            if self.xiaomi_radiobutton16.isChecked():   return self.xiaomi_radiobutton16.objectName()
            if self.xiaomi_radiobutton17.isChecked():   return self.xiaomi_radiobutton17.objectName()
            if self.xiaomi_radiobutton18.isChecked():   return self.xiaomi_radiobutton18.objectName()
            if self.xiaomi_radiobutton19.isChecked():   return self.xiaomi_radiobutton19.objectName()
            if self.xiaomi_radiobutton20.isChecked():   return self.xiaomi_radiobutton20.objectName()
            if self.xiaomi_radiobutton21.isChecked():   return self.xiaomi_radiobutton21.objectName()
            if self.xiaomi_radiobutton22.isChecked():   return self.xiaomi_radiobutton22.objectName()
            if self.xiaomi_radiobutton23.isChecked():   return self.xiaomi_radiobutton23.objectName()
            if self.xiaomi_radiobutton24.isChecked():   return self.xiaomi_radiobutton24.objectName()
            if self.xiaomi_radiobutton25.isChecked():   return self.xiaomi_radiobutton25.objectName()
            if self.xiaomi_radiobutton26.isChecked():   return self.xiaomi_radiobutton26.objectName()
            if self.xiaomi_radiobutton27.isChecked():   return self.xiaomi_radiobutton27.objectName()
            if self.xiaomi_radiobutton28.isChecked():   return self.xiaomi_radiobutton28.objectName()
            if self.xiaomi_radiobutton29.isChecked():   return self.xiaomi_radiobutton29.objectName()
            if self.xiaomi_radiobutton30.isChecked():   return self.xiaomi_radiobutton30.objectName()
            if self.xiaomi_radiobutton31.isChecked():   return self.xiaomi_radiobutton31.objectName()
            if self.xiaomi_radiobutton32.isChecked():   return self.xiaomi_radiobutton32.objectName()

        if self.brand_tab.currentIndex() == 4:
            if self.samsung_radiobutton1.isChecked():   return self.samsung_radiobutton1.objectName()
            if self.samsung_radiobutton2.isChecked():   return self.samsung_radiobutton2.objectName()
            if self.samsung_radiobutton3.isChecked():   return self.samsung_radiobutton3.objectName()
            if self.samsung_radiobutton4.isChecked():   return self.samsung_radiobutton4.objectName()
            if self.samsung_radiobutton5.isChecked():   return self.samsung_radiobutton5.objectName()
            if self.samsung_radiobutton6.isChecked():   return self.samsung_radiobutton6.objectName()
            if self.samsung_radiobutton7.isChecked():   return self.samsung_radiobutton7.objectName()
            if self.samsung_radiobutton8.isChecked():   return self.samsung_radiobutton8.objectName()
            if self.samsung_radiobutton9.isChecked():   return self.samsung_radiobutton9.objectName()
            if self.samsung_radiobutton10.isChecked():  return self.samsung_radiobutton10.objectName()

    def getcommand_method(self):
        for i in range(3):
            if self.brand_tab.currentIndex() == i:
                if self.command_bbk_radiobutton1.isChecked():    return self.command_bbk_radiobutton1.objectName()
                if self.command_bbk_radiobutton2.isChecked():    return self.command_bbk_radiobutton2.objectName()
                if self.command_bbk_radiobutton3.isChecked():    return self.command_bbk_radiobutton3.objectName()
                if self.command_bbk_radiobutton4.isChecked():    return self.command_bbk_radiobutton4.objectName()
                if self.command_bbk_radiobutton5.isChecked():    return self.command_bbk_radiobutton5.objectName()
                if self.command_bbk_radiobutton6.isChecked():    return self.command_bbk_radiobutton6.objectName()
                if self.command_bbk_radiobutton7.isChecked():    return self.command_bbk_radiobutton7.objectName()
                if self.command_bbk_radiobutton8.isChecked():    return self.command_bbk_radiobutton8.objectName()
                if self.command_bbk_radiobutton9.isChecked():    return self.command_bbk_radiobutton9.objectName()
                if self.command_bbk_radiobutton10.isChecked():   return self.command_bbk_radiobutton10.objectName()
                if self.command_bbk_radiobutton11.isChecked():   return self.command_bbk_radiobutton11.objectName()
                if self.command_bbk_radiobutton12.isChecked():   return self.command_bbk_radiobutton12.objectName()
                if self.command_bbk_radiobutton13.isChecked():   return self.command_bbk_radiobutton13.objectName()
                if self.command_bbk_radiobutton14.isChecked():   return self.command_bbk_radiobutton14.objectName()
                if self.command_bbk_radiobutton15.isChecked():   return self.command_bbk_radiobutton15.objectName()
                if self.command_bbk_radiobutton16.isChecked():   return self.command_bbk_radiobutton16.objectName()
                if self.command_bbk_radiobutton17.isChecked():   return self.command_bbk_radiobutton17.objectName()
                if self.command_bbk_radiobutton18.isChecked():   return self.command_bbk_radiobutton18.objectName()

        if self.brand_tab.currentIndex() == 3:
            if self.command_mi_radiobutton1.isChecked():    return self.command_mi_radiobutton1.objectName()
            if self.command_mi_radiobutton2.isChecked():    return self.command_mi_radiobutton2.objectName()
            if self.command_mi_radiobutton3.isChecked():    return self.command_mi_radiobutton3.objectName()
            if self.command_mi_radiobutton4.isChecked():    return self.command_mi_radiobutton4.objectName()
            if self.command_mi_radiobutton5.isChecked():    return self.command_mi_radiobutton5.objectName()
            if self.command_mi_radiobutton6.isChecked():    return self.command_mi_radiobutton6.objectName()
            if self.command_mi_radiobutton7.isChecked():    return self.command_mi_radiobutton7.objectName()

        if self.brand_tab.currentIndex() == 4:
            if self.command_sam_radiobutton1.isChecked():   return self.command_sam_radiobutton1.objectName()
            if self.command_sam_radiobutton2.isChecked():   return self.command_sam_radiobutton2.objectName()
            if self.command_sam_radiobutton3.isChecked():   return self.command_sam_radiobutton3.objectName()
            if self.command_sam_radiobutton4.isChecked():   return self.command_sam_radiobutton4.objectName()

        if self.brand_tab.currentIndex() == 5:
            if self.command_uni_radiobutton1.isChecked():   return self.command_uni_radiobutton1.objectName()
            if self.command_uni_radiobutton2.isChecked():   return self.command_uni_radiobutton2.objectName()
            if self.command_uni_radiobutton3.isChecked():   return self.command_uni_radiobutton3.objectName()
            if self.command_uni_radiobutton4.isChecked():   return self.command_uni_radiobutton4.objectName()
            if self.command_uni_radiobutton5.isChecked():   return self.command_uni_radiobutton5.objectName()
            if self.command_uni_radiobutton6.isChecked():   return self.command_uni_radiobutton6.objectName()
            if self.command_uni_radiobutton7.isChecked():   return self.command_uni_radiobutton7.objectName()
            if self.command_uni_radiobutton8.isChecked():   return self.command_uni_radiobutton8.objectName()
            if self.command_uni_radiobutton9.isChecked():   return self.command_uni_radiobutton9.objectName()
            if self.command_uni_radiobutton10.isChecked():  return self.command_uni_radiobutton10.objectName()
            if self.command_uni_radiobutton11.isChecked():  return self.command_uni_radiobutton11.objectName()
            if self.command_uni_radiobutton12.isChecked():  return self.command_uni_radiobutton12.objectName()
            if self.command_uni_radiobutton13.isChecked():  return self.command_uni_radiobutton13.objectName()

    def setadb_method(self):
        if self.adb_radiobutton1.isChecked():
            self.command_uni_radiobutton10.setChecked(True)

            self.fastboot_label.setEnabled(False)
            self.command_uni_radiobutton1.setEnabled(False)
            self.command_uni_radiobutton2.setEnabled(False)
            self.command_uni_radiobutton3.setEnabled(False)
            self.command_uni_radiobutton4.setEnabled(False)
            self.command_uni_radiobutton5.setEnabled(False)
            self.command_uni_radiobutton6.setEnabled(False)
            self.command_uni_radiobutton7.setEnabled(False)
            self.command_uni_radiobutton8.setEnabled(False)
            self.command_uni_radiobutton9.setEnabled(False)

            self.samadb_test_mode_label.setEnabled(True)
            self.command_uni_radiobutton10.setEnabled(True)
            self.command_uni_radiobutton11.setEnabled(True)
            self.command_uni_radiobutton12.setEnabled(True)

            self.adb_debugging_label.setEnabled(True)
            self.command_uni_radiobutton13.setEnabled(True)

        if self.adb_radiobutton2.isChecked():
            self.command_uni_radiobutton1.setChecked(True)

            self.fastboot_label.setEnabled(True)
            self.command_uni_radiobutton1.setEnabled(True)
            self.command_uni_radiobutton2.setEnabled(True)
            self.command_uni_radiobutton3.setEnabled(True)
            self.command_uni_radiobutton4.setEnabled(True)
            self.command_uni_radiobutton5.setEnabled(True)
            self.command_uni_radiobutton6.setEnabled(True)
            self.command_uni_radiobutton7.setEnabled(True)
            self.command_uni_radiobutton8.setEnabled(True)
            self.command_uni_radiobutton9.setEnabled(True)

            self.samadb_test_mode_label.setEnabled(False)
            self.command_uni_radiobutton10.setEnabled(False)
            self.command_uni_radiobutton11.setEnabled(False)
            self.command_uni_radiobutton12.setEnabled(False)

            self.adb_debugging_label.setEnabled(False)
            self.command_uni_radiobutton13.setEnabled(False)

    def getadb_method(self):
        if self.brand_tab.currentIndex() == 5:
            self.setadb_method()
            return "other"

    def do_unlock(self):
        self.progressBar_1.setValue(0)
        self.progressBar_2.setValue(0)

        method_selected = self.getadb_method()
        device_selected = self.getdevices()
        command_selected = self.getcommand_method()

        for item in \
            getdevices.oppo() + getdevices.realme() + getdevices.vivo() + \
            getdevices.xiaomi_poco() + getdevices.samsung():
            if device_selected == item["device_name"]:
                device_name = item["device_name"]
                device_description = item["device_description"]
                brand_name = item["brand_name"]
                brand_description = item["brand_description"]
                firehose = item["firehose"]
                storage = item["storage"]
        for item in getdevices.command_method():
            if command_selected == item["command"]:
                command_description = item["description"]

        self.log_process_1.clear()
        self.log_process_1.append(f"<p>\
        <span style=\"color:#ffffff\">Selected device: </span><span style=\"color:#ffff00\">{device_description}</span><br/>\
        <span style=\"color:#ffffff\">Selected brand: </span><span style=\"color:#ffff00\">{brand_description}</span><br/>\
        <span style=\"color:#ffffff\">Method options: </span><span style=\"color:#ffff00\">{command_description}</span><br/>\
        </p>")

        self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Searching port connected...</span>")
        sleep(5)
        self.progressBar_1.setValue(5)
        self.progressBar_2.setValue(5)

        port = self.port_list_1.currentText().split("  -  ")[0]
        if port:
            port_description = self.port_list_1.currentText().split("  -  ")[1]
            self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
            self.log_process_1.append(f"<p>\
            <span style=\"color:#ffffff\">Port: </span><span style=\"color:#ffff00\">{port}</span><br/>\
            <span style=\"color:#ffffff\">Description: </span><span style=\"color:#ffff00\">{port_description}</span><br/>\
            </p>")
            self.progressBar_1.setValue(10)
            self.progressBar_2.setValue(10)
        else:
            self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p>")
            return

        print()

        for port_type in ["COM", "tty"]:
            if re.search(port_type, port):
                self.log_process_1.append(f"<span style=\"color:#ffffff\">Connecting to device...</span>")
                try:
                    infotxt = open(log_path + "/info.txt", "w")
                    check_hw = \
                        [emmcdl_program, "-p", port, "-info"] \
                        if platform.system() == "Windows" else \
                        [emmcdl_program + " -p " + port + " -info"]

                    subprocess.call(check_hw, stdout = infotxt, stderr = subprocess.DEVNULL)
                    self.progressBar_1.setValue(13)
                    self.progressBar_2.setValue(13)
                except:
                    return

                for text in open(log_path + "/info.txt").readlines():
                    IDS_SN = re.findall("SerialNumber: (.*)", text)[0].split("x")[1]
                    OEM_PK = re.findall("OEM_PK_HASH: (.*)", text)[0].split("x")[1]
                    MSM_HW = re.findall("MSM_HW_ID: (.*)", text)[0].split("x")[1] + "0000000000000000"

                self.progressBar_1.setValue(18)
                self.progressBar_2.setValue(18)
                self.log_process_1.append(f"<p>\
                <span style=\"color:#ffffff\">IDS SN: </span><span style=\"color:#ffff00\">{IDS_SN}</span><br/>\
                <span style=\"color:#ffffff\">MSM HW: </span><span style=\"color:#ffff00\">{MSM_HW}</span><br/>\
                <span style=\"color:#ffffff\">OEM PK: </span><span style=\"color:#ffff00\">{OEM_PK}</span><br/>\
                <br/></p>")

                with currentdir + "/data/loader/" + brand_name + "/" + firehose as firehose_path:
                    if not os.path.exists(firehose_path):
                        self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Connecting server...</span>")
                        try:
                            repo_firehose = repos + "/raw/additional/data/loader/" + brand_name + "/" + firehose
                            request.urlopen(repos, timeout = 3)
                            request.urlretrieve(repo_firehose, temp_path + "/" + firehose)
                            self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                            firehose_loader = firehose, temp_path + "/" + firehose
                            self.progressBar_1.setValue(26)
                            self.progressBar_2.setValue(26)
                        except:
                            self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
                            self.log_process_1.append(f"<span style=\"color:#ff0000\">Failed connect the server.</span>")
                            return
                    else:
                        self.progressBar_1.setValue(31)
                        self.progressBar_2.setValue(31)
                        firehose_loader = firehose_path

        for bbk in ["oppo", "realme", "vivo"]:
            if brand_name == bbk:
                if command_selected == "userdata":
                    self.progressBar_1.setValue(39)
                    self.progressBar_2.setValue(39)
                    self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Erasing userdata...</span>")
                    try:
                        unlock.userdata(port, firehose_loader, storage)
                        self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                        self.progressBar_1.setValue(100)
                        self.progressBar_2.setValue(100)
                    except:
                        self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
                elif command_selected == "misc":
                    self.progressBar_1.setValue(39)
                    self.progressBar_2.setValue(39)
                    self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Erasing userdata...</span>")
                    try:
                        unlock.safe_storage(port, firehose_loader, storage)
                        self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                        self.progressBar_1.setValue(100)
                        self.progressBar_2.setValue(100)
                    except:
                        self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
                elif command_selected == "frp":
                    self.progressBar_1.setValue(39)
                    self.progressBar_2.setValue(39)
                    self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Resetting FRP...</span>")
                    try:
                        unlock.frp(port, firehose_loader, storage, "frp")
                        self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                        self.progressBar_1.setValue(100)
                        self.progressBar_2.setValue(100)
                    except:
                        self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
                elif command_selected == "efs":
                    self.progressBar_1.setValue(39)
                    self.progressBar_2.setValue(39)
                    self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Resetting EFS IMEI...</span>")
                    try:
                        unlock.efs(port, firehose_loader, storage)
                        self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                        self.progressBar_1.setValue(100)
                        self.progressBar_2.setValue(100)
                    except:
                        self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
                elif command_selected == "unlock_bl":
                    self.progressBar_1.setValue(39)
                    self.progressBar_2.setValue(39)
                    self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Unlocking bootloader...</span>")
                    try:
                        unlock.unlock_bl(port, firehose_loader, storage, brand_name)
                        self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                        self.progressBar_1.setValue(100)
                        self.progressBar_2.setValue(100)
                    except:
                        self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
                elif command_selected == "relock_bl":
                    self.progressBar_1.setValue(39)
                    self.progressBar_2.setValue(39)
                    self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Locking bootloader...</span>")
                    try:
                        unlock.relock_bl(port, firehose_loader, storage, brand_name)
                        self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                        self.progressBar_1.setValue(100)
                        self.progressBar_2.setValue(100)
                    except:
                        self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")

        if brand_name == "xiaomi":
            if command_selected == "userdata":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Erasing userdata...</span>")
                try:
                    unlock.userdata(port, firehose_loader, storage)
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
            elif command_selected == "misc":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Erasing userdata...</span>")
                try:
                    unlock.safe_storage(port, firehose_loader, storage)
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
            elif command_selected == "micloud":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Resetting MiCloud...</span>")
                try:
                    unlock.micloud(port, firehose_loader, storage)
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
            elif command_selected == "frp":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Resetting FRP...</span>")
                try:
                    unlock.frp(port, firehose_loader, storage, "config")
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
            elif command_selected == "efs":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Resetting EFS IMEI...</span>")
                try:
                    unlock.efs(port, firehose_loader, storage)
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
            elif command_selected == "unlock_bl":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Unlocking bootloader...</span>")
                try:
                    unlock.unlock_bl(port, firehose_loader, storage, brand_name)
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
            elif command_selected == "relock_bl":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Locking bootloader...</span>")
                try:
                    unlock.relock_bl(port, firehose_loader, storage, brand_name)
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")

        if brand_name == "samsung":
            if command_selected == "userdata":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Erasing userdata...</span>")
                try:
                    unlock.userdata(port, firehose_loader, storage)
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
            elif command_selected == "misc":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Erasing userdata...</span>")
                try:
                    unlock.safe_storage(port, firehose_loader, storage)
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
            elif command_selected == "frp":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Resetting FRP...</span>")
                try:
                    unlock.frp(port, firehose_loader, storage, "persistent")
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
            elif command_selected == "efs":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Resetting EFS IMEI...</span>")
                try:
                    unlock.efs(port, firehose_loader, storage)
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")

        if brand_name == "other":
            if command_selected == "userdata":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Erasing userdata...</span>")
                try:
                    unlock.userdata(port, firehose_loader, storage)
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
            elif command_selected == "misc":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Erasing userdata...</span>")
                try:
                    unlock.safe_storage(port, firehose_loader, storage)
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
            elif command_selected == "frp":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Resetting FRP...</span>")
                try:
                    unlock.frp(port, firehose_loader, storage, "frp")
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
            elif command_selected == "efs":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Resetting EFS IMEI...</span>")
                try:
                    unlock.efs(port, firehose_loader, storage)
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")

        if method_selected == "other":
            if command_selected == "unlock_bl_1":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Unlocking bootloader...</span>")
                try:
                    unlock.fastboot_unlock_bl_oem(port)
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
            elif command_selected == "unlock_bl_2":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Unlocking bootloader...</span>")
                try:
                    unlock.fastboot_unlock_bl_flashing(port)
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
            elif command_selected == "relock_bl_1":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Locking bootloader...</span>")
                try:
                    unlock.fastboot_lock_bl_oem(port)
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
            elif command_selected == "relock_bl_2":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Locking bootloader...</span>")
                try:
                    unlock.fastboot_lock_bl_flashing(port)
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
            elif command_selected == "fastboot_recovery":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Rebooting to recovery mode...</span>")
                try:
                    reboot.rebootrecovery_fastboot(port)
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
            elif command_selected == "fastboot_reboot":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Rebooting to fastboot mode...</span>")
                try:
                    reboot.rebootbl_fastboot(port)
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
            elif command_selected == "fastboot_edl_1":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Rebooting to EDL mode...</span>")
                try:
                    reboot.rebootedl_fastboot_oem(port)
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
            elif command_selected == "fastboot_edl_2":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Rebooting to EDL mode...</span>")
                try:
                    reboot.rebootedl_fastboot(port)
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
            elif command_selected == "fastboot_frp":
                pass
            elif command_selected == "fastboot_demo_1":
                pass
            elif command_selected == "fastboot_demo_2":
                pass
            elif command_selected == "adb_recovery":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Rebooting to recovery mode...</span>")
                try:
                    reboot.rebootrecovery_adb(port)
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
            elif command_selected == "adb_fastboot":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Rebooting to fastboot mode...</span>")
                try:
                    reboot.rebootbl_adb(port)
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
            elif command_selected == "adb_edl":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Rebooting to EDL mode...</span>")
                try:
                    reboot.rebootedl_adb(port)
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
            elif command_selected == "adb_frp":
                self.progressBar_1.setValue(39)
                self.progressBar_2.setValue(39)
                self.log_process_1.append(f"<p><span style=\"color:#ffffff\">Resetting FRP...</span>")
                try:
                    unlock.bypassfrp_samadb(port)
                    self.log_process_1.append(f"<span style=\"color:#00ff00\">OK</span></p>")
                    self.progressBar_1.setValue(100)
                    self.progressBar_2.setValue(100)
                except:
                    self.log_process_1.append(f"<span style=\"color:#ff0000\">ERROR</span></p><br/>")
            elif command_selected == "adb_erasefrp":
                pass
            elif command_selected == "adb_pushfrp":
                pass
            elif command_selected == "oppo_demo":
                pass

    def check_port(self):
        self.port_list_1.clear()
        adb_devices = \
            [adb_program, "devices"] \
            if platform.system() == "Windows" else \
            [adb_program + " devices"]
        fastboot_devices = \
            [fastboot_program, "devices"] \
            if platform.system() == "Windows" else \
            [fastboot_program + " devices"]

        for output in list_ports.comports():
            if platform.system() == "Windows":
                if re.search("Qualcomm", str(output)):
                    comport_id = str(output).split(" ")[0]
                    comport_description = re.sub("\(.*\)\>", "", str(output).split(" - ")[1])
            else:
                if re.search("Qualcomm", output.description):
                    comport_id = output.device
                    comport_description = output.description

            for result in [comport_id + "  -  " + comport_description]:
                self.port_list_1.addItem(result)

        with subprocess.Popen(adb_devices, shell = True, stdout = subprocess.PIPE) as proc:
            for output in proc.stdout.readlines()[1:-1]:
                for item in ["device", "recovery", "sideload"]:
                    if re.search(item, output.decode("UTF-8")):
                        adb_serial = output.decode("UTF-8").replace(item, "").strip()
                        adb_description = "Android ADB Interface (" + item + ")"
                        for result in [adb_serial + "  -  " + adb_description]:
                            self.port_list_1.addItem(result)

        with subprocess.Popen(fastboot_devices, shell = True, stdout = subprocess.PIPE) as proc:
            for output in proc.stdout.readlines()[1:-1]:
                if re.search("fastboot", output.decode("UTF-8")):
                    fastboot_serial = output.decode("UTF-8").replace("fastboot", "").strip()
                    fastboot_description = "Android Bootloader Interface"
                    for result in [fastboot_serial + "  -  " + fastboot_description]:
                        self.port_list_1.addItem(result)

    def openManual(self, manualFlashDialog):
        widgetDialog = QtWidgets.QWidget()
        manualFlashDialog = QtWidgets.QDialog(widgetDialog)
        ui = Ui_manualFlash_fastboot()
        ui.setupUi(manualFlashDialog)
        manualFlashDialog.exec_()

    def checkUpdates(self):
        widgetDialog = QtWidgets.QWidget()
        msgBox = QtWidgets.QMessageBox(widgetDialog)
        msgBox.setStandardButtons(QtWidgets.QMessageBox.Ok)

        if version_info < (1,0):
            repo_releases = repos + "/releases"
            url = QtCore.QUrl(repo_releases)
            if not QtGui.QDesktopServices.openUrl(url):
                msgBox.setIcon(QtWidgets.QMessageBox.Critical)
                msgBox.setText("Could not open URL")
                msgBox.exec_()
        else:
            msgBox.setIcon(QtWidgets.QMessageBox.Information)
            msgBox.setText("Your program is latest version.")
            msgBox.exec_()

        return

    def openMonitor(self):
        threading.Thread(target = self.thread_systemMonitor, daemon = True).start()

    def thread_systemMonitor(self):
        if platform.system() == "Windows":
            os.system("taskmgr.exe")
        elif platform.system() == "Linux":
            if os.environ["XDG_CURRENT_DESKTOP"] == "GNOME":
                os.system("gnome-system-monitor")
            elif os.environ["XDG_CURRENT_DESKTOP"] == "KDE":
                os.system("systemmonitor")

    def openDevice_Manager(self):
        threading.Thread(target = self.thread_deviceManager, daemon = True).start()

    def thread_deviceManager(self):
        if platform.system() == "Windows":
            os.system("start control.exe /name Microsoft.DeviceManager")

    def open_installDrivers(self, driverDialog):
        widgetDialog = QtWidgets.QWidget()
        driverDialog = QtWidgets.QDialog(widgetDialog)
        ui = Ui_driverDialog()
        ui.setupUi(driverDialog)
        driverDialog.exec_()

    def open_logFolder(self):
        threading.Thread(target = self.thread_log, daemon = True).start()

    def thread_log(self):
        if not os.path.exists(log_path):
            os.makedirs(log_path)

        if platform.system() == "Windows":
            subprocess.Popen(["explorer.exe", log_path.replace("/", "\\")])
        elif platform.system() == "Darwin":
            subprocess.Popen(["open", log_path])
        else:
            subprocess.Popen(["xdg-open", log_path])

    def openLicense(self, licenseDialog):
        if not os.path.exists(license_file):
            try:
                repo_license = repos + "/raw/master/LICENSE"
                request.urlopen(repos, timeout = 3)
                request.urlretrieve(repo_license, license_file)
            except:
                widgetDialog = QtWidgets.QWidget()
                msgBox = QtWidgets.QMessageBox(widgetDialog)
                msgBox.setIcon(QtWidgets.QMessageBox.Critical)
                msgBox.setText("Could not getting License agreements document.")
                msgBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
                msgBox.exec_()
                return

        widgetDialog = QtWidgets.QWidget()
        licenseDialog = QtWidgets.QDialog(widgetDialog)
        ui = Ui_licenseDialog()
        ui.setupUi(licenseDialog)
        licenseDialog.exec_()

    def openAbout(self):
        Dialog = Ui_aboutDialog()
        Dialog.exec_()

class Ui_driverDialog(object):
    def setupUi(self, driverDialog):
        driverTitle = \
            "Choose driver to want install your system:" \
            if platform.system() == "Windows" else \
            "Choose driver to want register your system:"

        driverDialog.resize(342, 184)
        driverDialog.setMinimumSize(QtCore.QSize(342, 184))
        driverDialog.setMaximumSize(QtCore.QSize(342, 184))
        driverDialog.setWindowTitle("Driver setup")
        self.verticalLayout = QtWidgets.QVBoxLayout(driverDialog)
        self.groupBox = QtWidgets.QGroupBox(driverDialog)
        self.groupBox.setTitle(driverTitle)
        self.gridLayout = QtWidgets.QGridLayout(self.groupBox)

        self.qcser = QtWidgets.QCheckBox(self.groupBox)
        self.qcser.setText("Qualcomm USB serial driver")
        self.gridLayout.addWidget(self.qcser, 0, 0, 1, 1)
        self.adb = QtWidgets.QCheckBox(self.groupBox)
        self.adb.setText("ADB Interface driver")
        self.gridLayout.addWidget(self.adb, 1, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem, 2, 0, 1, 1)
        self.verticalLayout.addWidget(self.groupBox)

        self.buttonBox = QtWidgets.QDialogButtonBox(driverDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Close|QtWidgets.QDialogButtonBox.Ok)
        self.verticalLayout.addWidget(self.buttonBox)

        self.buttonBox.accepted.connect(self.do_installDriver)
        self.buttonBox.rejected.connect(driverDialog.close)
        QtCore.QMetaObject.connectSlotsByName(driverDialog)

    def do_installDriver(self):
        if platform.system() == "Windows":
            self.threads = threading.Thread(target = self.thread_installDriver, daemon = True)
        else:
            self.threads = threading.Thread(target = self.thread_registerDriver, daemon = True)

        self.threads.start()

    def thread_installDriver(self):
        if self.qcser.isChecked():
            zip = currentdir + "/data/drivers/qcser.zip"
            if os.path.exists(zip):
                with ZipFile(zip, "r") as source:
                    source.extractall(temp_path)
            else:
                zip = temp_path + "/qcser.zip"
                request.urlretrieve(repos + "/raw/additional/data/drivers/qcser.zip", zip)
                with ZipFile(zip, "r") as source:
                    source.extractall(temp_path)

            if not ctypes.windll.shell32.IsUserAnAdmin():
                ctypes.windll.shell32.ShellExecuteW(None, "runas",
                                                    sys.executable,
                                                    "pnputil.exe", "'-i -a'",
                                                    temp_path + "/" + processor_arch + "/qcser.inf",
                                                    1)
        if self.adb.isChecked():
            zip = currentdir + "/data/drivers/adb_usb.zip"
            if os.path.exists(zip):
                with ZipFile(zip, "r") as source:
                    source.extractall(temp_path)
            else:
                zip = temp_path + "/adb_usb.zip"
                request.urlretrieve(repos + "/raw/additional/data/drivers/adb_usb.zip", zip)
                with ZipFile(zip, "r") as source:
                    source.extractall(temp_path)

            if not ctypes.windll.shell32.IsUserAnAdmin():
                ctypes.windll.shell32.ShellExecuteW(None, "runas",
                                                    sys.executable,
                                                    "pnputil.exe", "'-i -a'",
                                                    temp_path + "/android_winusb.inf",
                                                    1)

    def threads_registerDriver(self):
        for super_user in ["pkexec", "gksudo", "ksu"]:
            if shutil.which(super_user):
                su = super_user
                break

        if self.qcser.isChecked():
            rules = currentdir + "/data/drivers/51-edl.rules"
            if not os.path.exists(rules):
                rules = temp_path + "/51-edl.rules"
                request.urlretrieve(repos + "/raw/additional/data/drivers/51-edl.rules", rules)

            subprocess.call([su + os.environ["SHELL"] + ' -c "cp ' + rules + ' /usr/lib/udev/rules.d/; udevadm control --reload-rules"'])
        if self.adb.isChecked():
            rules = currentdir + "/data/drivers/50-android.rules"
            if not os.path.exists(rules):
                rules = temp_path + "/50-android.rules"
                request.urlretrieve(repos + "/raw/additional/data/drivers/50-android.rules", rules)

            subprocess.call([su + os.environ["SHELL"] + ' -c "cp ' + rules + ' /usr/lib/udev/rules.d/; udevadm control --reload-rules"'])

class Ui_manualFlash_fastboot(object):
    def setupUi(self, manualFlashDialog):
        manualFlashDialog.resize(400, 238)
        manualFlashDialog.setMinimumSize(QtCore.QSize(400, 238))
        manualFlashDialog.setMaximumSize(QtCore.QSize(400, 238))
        manualFlashDialog.setWindowTitle("Manual Flash menu")

        self.gridLayout = QtWidgets.QGridLayout(manualFlashDialog)
        self.groupBox = QtWidgets.QGroupBox(manualFlashDialog)
        self.groupBox.setTitle("Manual flash (Fastboot only)")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.groupBox)

        self.port_list = QtWidgets.QComboBox(self.groupBox)
        self.gridLayout_2.addWidget(self.port_list, 0, 0, 1, 2)

        self.toolButton = QtWidgets.QToolButton(self.groupBox)
        self.toolButton.setText("Refresh")
        self.toolButton.clicked.connect(self.check_port)
        self.gridLayout_2.addWidget(self.toolButton, 0, 2, 1, 1)

        self.partition_list = QtWidgets.QComboBox(self.groupBox)
        self.gridLayout_2.addWidget(self.partition_list, 1, 1, 1, 2)

        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setText("Partition: ")
        self.label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.gridLayout_2.addWidget(self.label, 1, 0, 1, 1)

        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setText("File name: ")
        self.label_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.gridLayout_2.addWidget(self.label_2, 2, 0, 1, 1)

        self.toolButton_2 = QtWidgets.QToolButton(self.groupBox)
        self.toolButton_2.setText("Browse")
        self.toolButton_2.clicked.connect(self.open_image)
        self.gridLayout_2.addWidget(self.toolButton_2, 2, 2, 1, 1)

        self.image_line = QtWidgets.QLineEdit(self.groupBox)
        self.gridLayout_2.addWidget(self.image_line, 2, 1, 1, 1)

        self.gridLayout.addWidget(self.groupBox, 0, 0, 1, 1)
        self.progressBar = QtWidgets.QProgressBar(manualFlashDialog)
        self.progressBar.setProperty("value", 0)
        self.gridLayout.addWidget(self.progressBar, 1, 0, 1, 1)

        self.buttonBox = QtWidgets.QDialogButtonBox(manualFlashDialog)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Apply|QtWidgets.QDialogButtonBox.Close)
        self.buttonBox.button(QtWidgets.QDialogButtonBox.Apply).clicked.connect(self.do_manualFlash)
        self.buttonBox.button(QtWidgets.QDialogButtonBox.Close).clicked.connect(manualFlashDialog.close)
        self.gridLayout.addWidget(self.buttonBox, 2, 0, 1, 1)

        self.check_port()
        QtCore.QMetaObject.connectSlotsByName(manualFlashDialog)

    def do_manualFlash(self):
        threading.Thread(target = self.thread_manualFlash, daemon = True).start()

    def thread_manualFlash(self):
        port = self.port_list.currentText().split("  -  ")[0]
        if self.image_line.text():
            flash_image = \
                [fastboot_program, "-s", port, "flash", self.partition_list.currentText(), self.image_line.text()] \
                if platform.system() == "Windows" else \
                [fastboot_program + " -s " + port + " flash " + self.partition_list.currentText() + " " + self.image_line.text()]
            subprocess.call(flash_image, stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL)
        else:
            widgetDialog = QtWidgets.QWidget()
            msgBox = QtWidgets.QMessageBox(widgetDialog)
            msgBox.setIcon(QtWidgets.QMessageBox.Critical)
            msgBox.setText("Invalid image inserted.")
            msgBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            msgBox.exec_()

    def check_port(self):
        self.port_list.clear()
        fastboot_devices = \
            [fastboot_program, "devices"] \
            if platform.system() == "Windows" else \
            [fastboot_program + " devices"]

        with subprocess.Popen(fastboot_devices, shell = True, stdout = subprocess.PIPE) as proc:
            for output in proc.stdout.readlines()[1:-1]:
                if re.search("fastboot", output.decode("UTF-8")):
                    fastboot_serial = output.decode("UTF-8").replace("fastboot", "").strip()
                    fastboot_description = "Android Bootloader Interface"
                    for result in [fastboot_serial + "  -  " + fastboot_description]:
                        self.port_list.addItem(result)

    def open_image(self):
        self.filter = "raw image file (*.img *.bin);;All files (*)"
        self.outputline = self.image_line
        result = QtWidgets.QFileDialog.getOpenFileName(None, "Select image file", None, self.filter)
        if result[0]:
            if platform.system() == "Windows": result = result.replace("/", "\\")
            self.outputline.setText(result[0])
            self.image_line = self.outputline

class Ui_licenseDialog(object):
    def setupUi(self, licenseDialog):
        pixmap = QtGui.QPixmap(1, 1)
        pixmap.fill(QtCore.Qt.transparent)

        open_license = open(license_file).read()
        licenseDialog.setWindowModality(QtCore.Qt.NonModal)
        licenseDialog.resize(480, 360)
        licenseDialog.setMinimumSize(QtCore.QSize(480, 360))
        licenseDialog.setMaximumSize(QtCore.QSize(480, 360))
        licenseDialog.setWindowTitle("License agreements")
        licenseDialog.setWindowIcon(QtGui.QIcon(pixmap))
        licenseDialog.setModal(True)

        self.gridLayout = QtWidgets.QGridLayout(licenseDialog)
        self.plainTextEdit = QtWidgets.QPlainTextEdit(licenseDialog)
        self.plainTextEdit.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.plainTextEdit.setUndoRedoEnabled(False)
        self.plainTextEdit.setReadOnly(True)
        self.plainTextEdit.setPlainText(open_license)
        self.gridLayout.addWidget(self.plainTextEdit, 0, 0, 1, 1)

        QtCore.QMetaObject.connectSlotsByName(licenseDialog)

class Ui_aboutDialog(QtWidgets.QDialog):
    def __init__(self):
        super(Ui_aboutDialog, self).__init__()

        self.resize(914, 453)
        self.setWindowTitle("About this tools")
        self.setStyleSheet("background-color: rgb(119, 118, 123);")
        self.setWindowFlags(QtCore.Qt.Tool|QtCore.Qt.FramelessWindowHint)
        self.setWindowModality(QtCore.Qt.NonModal)

        rect = QtWidgets.QDesktopWidget().availableGeometry()
        mainRect = self.frameGeometry()
        mainRect.moveCenter(rect.center())
        self.move(mainRect.topLeft())

        font = QtGui.QFont()
        font.setPointSize(32)
        font.setBold(True)
        font.setWeight(75)
        font.setItalic(True)
        if platform.system() == "Windows":
            font.setFamily("Times New Roman")
            font.setPointSize(36)
        else:
            font.setFamily("Serif")
            font.setPointSize(30)
        self.title = QtWidgets.QLabel(self)
        self.title.setGeometry(QtCore.QRect(349, 37, 560, 61))
        self.title.setFont(font)
        self.title.setStyleSheet("color: rgb(255, 255, 255);")
        self.title.setText("TFF/Qualcomm Tools")

        self.TFF_logo = QtWidgets.QLabel(self)
        self.TFF_logo.setGeometry(QtCore.QRect(49, 80, 271, 271))
        self.TFF_logo.setPixmap(QtGui.QPixmap(TFF_image_file))
        self.TFF_logo.setScaledContents(True)

        font = QtGui.QFont()
        font.setPointSize(12)
        if platform.system() == "Windows": font.setFamily("Segoe UI")
        self.description = QtWidgets.QLabel(self)
        self.description.setGeometry(QtCore.QRect(369, 122, 500, 51))
        self.description.setFont(font)
        self.description.setStyleSheet("color: rgb(255, 255, 255);")
        self.description.setText('''
        <html><head/><body>
        <li>Unlock and flash the Android phone device.  Powered by <b>Python 3.10</b> and <b>PyQt5.</b></li>
        </body></html>
        ''')
        self.description.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.description.setWordWrap(True)

        font = QtGui.QFont()
        font.setPointSize(12)
        if platform.system() == "Windows": font.setFamily("Segoe UI")
        self.copyright = QtWidgets.QLabel(self)
        self.copyright.setGeometry(QtCore.QRect(369, 171, 500, 51))
        self.copyright.setFont(font)
        self.copyright.setStyleSheet("color: rgb(255, 255, 255);")
        self.copyright.setText('''
        <html><head/><body>
        <li>This script developed by Faizal Hamzah [The Firefox Flasher] for</li>
        <li>Linux platform.  Licensed under the MIT License.</li>
        </body></html>
        ''')
        self.copyright.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)

        font = QtGui.QFont()
        font.setPointSize(12)
        if platform.system() == "Windows": font.setFamily("Segoe UI")
        self.credits = QtWidgets.QLabel(self)
        self.credits.setGeometry(QtCore.QRect(369, 221, 500, 21))
        self.credits.setFont(font)
        self.credits.setStyleSheet("color: rgb(255, 255, 255);")
        self.credits.setText("<html><head/><body><b><li>Credits:</li></b></body></html>")
        self.credits.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)

        font = QtGui.QFont()
        font.setPointSize(12)
        if platform.system() == "Windows": font.setFamily("Segoe UI")
        self.dot = QtWidgets.QLabel(self)
        self.dot.setGeometry(QtCore.QRect(375, 251, 21, 91))
        self.dot.setFont(font)
        self.dot.setStyleSheet("color: rgb(255, 255, 255);")
        self.dot.setText("<html><head/><body><li>•</li><li>•</li><li>•</li><li>•</li></body></html>")
        self.dot.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)

        font = QtGui.QFont()
        font.setPointSize(12)
        if platform.system() == "Windows": font.setFamily("Segoe UI")
        self.credits_name = QtWidgets.QLabel(self)
        self.credits_name.setGeometry(QtCore.QRect(401, 251, 120, 91))
        self.credits_name.setFont(font)
        self.credits_name.setStyleSheet("color: rgb(255, 255, 255);")
        self.credits_name.setText('''
        <html><head/><body>
        <li><a href="https://github.com/nijel8"><span style="text-decoration: underline; color:#99c1f1;">Nijel8</span></a></li>
        <li><a href="https://github.com/bkerler"><span style="text-decoration: underline; color:#99c1f1;">Bjoern Kerler</span></a></li>
        <li><a href="https://www.facebook.com/haryflasher"><span style="text-decoration: underline; color:#99c1f1;">Hary Sulteng</span></a></li>
        <li><a href="https://www.facebook.com/f.hadikhoir"><span style="text-decoration: underline; color:#99c1f1;">Hadi Khoirudin</span></a></li>
        </body></html>
        ''')
        self.credits_name.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.credits_name.setOpenExternalLinks(True)

        font = QtGui.QFont()
        font.setPointSize(12)
        if platform.system() == "Windows": font.setFamily("Segoe UI")
        self.product_developed = QtWidgets.QLabel(self)
        self.product_developed.setGeometry(QtCore.QRect(549, 251, 320, 91))
        self.product_developed.setFont(font)
        self.product_developed.setStyleSheet("color: rgb(255, 255, 255);")
        self.product_developed.setText('''
        <html><head/><body>
        <li>Developer of emmcdl</li>
        <li>Developer of Qualcomm Firehose Attacker</li>
        <li>Owner of Qualcomm GSM Sulteng Tool</li>
        <li>Software Engineer</li>
        </body></html>
        ''')
        self.product_developed.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)

        self.OKButton = QtWidgets.QPushButton(self)
        self.OKButton.setGeometry(QtCore.QRect(720, 390, 160, 35))
        self.OKButton.setText("OK")
        self.OKButton.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.OKButton.clicked.connect(self.close)




app = QtWidgets.QApplication(sys.argv)
scriptfile = os.path.basename(__file__)

if platform.system() == "Linux" or platform.system() == "Windows":
    repos = "https://github.com/thefirefox12537/qctools_tff"
    currentdir = os.getcwd().replace("\\", "/")
    ssl._create_default_https_context = ssl._create_unverified_context

    license_file = currentdir + "/LICENSE"
    icon_file = currentdir + "/assets/resources/icons/qctools"
    TFF_image_file = currentdir + "/assets/resources/images/about_qctools.png"
    log_path = currentdir + "/data/log"
    temp_path = currentdir + "/data/log/temp"
    version_info = 1,0
    build_info = "beta 20220820_2120wib"

    if platform.system() == "Windows":
        adb_program = ".\\data\\adb.exe"
        emmcdl_program = ".\\data\\emmcdl.exe"
        fastboot_program = ".\\data\\fastboot.exe"
    else:
        adb_program = "./data/adb"
        emmcdl_program = "./data/emmcdl"
        fastboot_program = "./data/fastboot"

    for proc in ["i386", "i586", "i686", "ia32", "x86"]:
        if platform.processor() == proc: processor_arch = "x86"
    for proc in ["amd64", "x86_64", "ia64", "x64"]:
        if platform.processor() == proc: processor_arch = "x64"

    if not os.path.exists(adb_program): adb_program = "adb"
    if not os.path.exists(fastboot_program): fastboot_program = "fastboot"
    if not os.path.exists(emmcdl_program):
        widget = QtWidgets.QWidget()
        msgBox = QtWidgets.QMessageBox(widget)
        msgBox.setIcon(QtWidgets.QMessageBox.Critical)
        msgBox.setText("emmcdl is not found.")
        msgBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
        msgBox.show()
        sys.exit(msgBox.exec_())

    if not os.path.exists(temp_path):
        os.makedirs(temp_path)

    subprocess.call([adb_program, "start-server"])
    MainWindow = Ui_MainWindow()
    MainWindow.show()
    sys.exit(app.exec_())
else:
    widget = QtWidgets.QWidget()
    msgBox = QtWidgets.QMessageBox(widget)
    msgBox.setIcon(QtWidgets.QMessageBox.Critical)
    msgBox.setText(scriptfile + " cannot be run in " + platform.system() + " " + platform.release() + ".")
    msgBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
    msgBox.show()
    sys.exit(msgBox.exec_())
